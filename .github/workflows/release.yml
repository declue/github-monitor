name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact: jhl-github-desktop-linux.tar.gz
          - os: windows-latest
            platform: windows
            artifact: jhl-github-desktop-windows.zip
          - os: macos-latest
            platform: macos
            artifact: jhl-github-desktop-macos.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-pyloid.txt

      - name: Check npm installation
        run: |
          npm --version
          node --version

      - name: Build application
        run: python build.py
        env:
          PYTHONUNBUFFERED: 1
          PYTHONIOENCODING: utf-8

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/${{ matrix.artifact }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Read version info
        id: version_info
        run: |
          VERSION=$(cat backend/app/version.py | grep '__version__' | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## JHL GitHub Desktop ${{ steps.get_version.outputs.VERSION }}

            GitHub Actions Runner Monitor - 데스크톱 애플리케이션

            **제작자**: JHL (declue)
            **저장소**: https://github.com/declue/github-monitor

            ### 다운로드
            - **Windows**: `jhl-github-desktop-windows.zip`
            - **macOS**: `jhl-github-desktop-macos.zip`
            - **Linux**: `jhl-github-desktop-linux.tar.gz`

            ### 설치 방법

            #### Windows
            1. `jhl-github-desktop-windows.zip` 다운로드
            2. 압축 해제
            3. `jhl-github-desktop.exe` 실행

            #### macOS
            1. `jhl-github-desktop-macos.zip` 다운로드
            2. 압축 해제
            3. `JHL GitHub Desktop.app` 실행
            4. 보안 경고가 표시되면 앱을 마우스 오른쪽 버튼으로 클릭하고 "열기"를 선택하세요

            #### Linux
            1. `jhl-github-desktop-linux.tar.gz` 다운로드
            2. 압축 해제: `tar -xzf jhl-github-desktop-linux.tar.gz`
            3. 실행: `./jhl-github-desktop/jhl-github-desktop`

            ### 초기 설정
            첫 실행 시 설정 대화상자에서 GitHub 토큰과 조직을 구성하세요.

            ### 주요 기능
            - 🚀 GitHub Actions 워크플로우 모니터링
            - 📊 저장소, 러너, 이슈, PR 통합 뷰
            - 🔍 강력한 검색 및 필터링
            - 💾 로컬 저장소 (안전한 토큰 보관)
            - ⚡ 빠른 네이티브 성능

            ### 변경 사항
            커밋 히스토리를 참조하세요.

            ---
            🤖 Built with [Pyloid](https://github.com/pyloid/pyloid) | Made by JHL (declue) | Generated with [Claude Code](https://claude.com/claude-code)
          files: |
            artifacts/linux-build/jhl-github-desktop-linux.tar.gz
            artifacts/windows-build/jhl-github-desktop-windows.zip
            artifacts/macos-build/jhl-github-desktop-macos.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
